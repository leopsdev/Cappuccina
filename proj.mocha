def identity(x) = proj(1)

def soma(x, y) = rec(proj(1), succ(recproj(2)))

def mult(x, y) = rec(zero(), soma(recproj(3), recproj(2)))

def fatorial(x) = rec(succ(zero()), mult(recproj(2), succ(recproj(1))))

def exponencial(x, y) = rec(succ(zero()), mult(recproj(3), recproj(2)))

def pred(x) = rec(zero(), recproj(1))

def diff(x, y) = rec(proj(1), pred(recproj(2))) 

def absdiff(x, y) = soma(diff(proj(1), proj(2)), diff(proj(2), proj(1)))

def pot2(x) = rec(succ(zero()), mult(succ(succ(zero())), recproj(2)))

def quadrado(x) = mult(proj(1), proj(1))

def soma3(x, y, z) = soma(soma(proj(1), proj(2)), proj(3))

def max(x, y) = soma3(                                 
    mult(gt(proj(1), proj(2)), proj(1)), 
    mult(gt(proj(2), proj(1)), proj(2)),
    mult(eq(proj(1), proj(2)), proj(1))
)

def inteiro(x) = rec(zero(), succ(recproj(2)))

def alpha(x) = diff(inteiro(1), proj(1))

def eq(x, y) = alpha(absdiff(proj(1), proj(2)))

def leq(x, y) = alpha(diff(proj(1), proj(2)))

def geq(x, y) = alpha(diff(proj(2), proj(1)))

def lt(x, y) = and(leq(proj(1), proj(2)), uneq(proj(1), proj(2)))

def gt(x, y) = and(geq(proj(1), proj(2)), uneq(proj(1), proj(2)))

def and(x, y) = mult(proj(1), proj(2))

def or(x, y) = soma(proj(1), proj(2))

def not(x) = alpha(proj(1))

def uneq(x, y) = not(eq(proj(1), proj(2)))

def menorquecinco(x) = lt(proj(1), inteiro(5))
def maiorque10(x) = gt(proj(1), inteiro(200))

def maxmenor5(x) = auxmaxmenor5(proj(1), proj(1))

def auxmaxmenor5(x, y) = rec(
    zero(),
    soma(
        mult(menorquecinco(succ(recproj(1))), succ(recproj(1))),
        mult(not(menorquecinco(succ(recproj(1)))), recproj(2))
    )
)

def minmaior5(x) = auxminmaior5(proj(1), proj(1), proj(1))

def auxminmaior5(x, y, z) = rec(    
    zero(),
    soma(
        mult(maiorque10(succ(diff(recproj(3), recproj(1)))), succ(diff(recproj(3), recproj(1)))),
        mult(not(maiorque10(succ(diff(recproj(3), recproj(1))))), recproj(2))
    )
)

def emultiplo(x, y) = aux_multiplo(proj(1), proj(2), proj(1))

def aux_multiplo(x, y, z) = rec(       
    zero(),
    soma(
        eq(
            mult(succ(recproj(1)), recproj(3)),
            recproj(4)
        ),
        mult(
            not(eq(mult(succ(recproj(1)), recproj(3)), recproj(4))),
            recproj(2)
        )
    )
)

def epar(x) = emultiplo(proj(1), inteiro(2))

def main(x){

}


def algumacoisa(x) = mu_lim(teto, Predicado)
def algumacoisa(x) = mu(Predicado)
